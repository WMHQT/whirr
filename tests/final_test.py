# tests/test_logging_fixed.py
import sys
import os
import time
import queue
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
project_root = os.path.dirname(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(project_root, 'src'))


def test_logging_fixed():
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 45)

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        import logger
        logger.setup_logging()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        import collect
        import logging

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        test_queue = queue.Queue()
        collector = collect.ResultCollector(test_queue)
        collector.start()

        print("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamp = time.time()
        for i in range(8):
            result = collect.InferenceResult(
                channel_id=i,
                timestamp=timestamp,
                category_pred=(i, 0.9),
                target_pred=(i, 0.8)
            )
            test_queue.put(result)

        # –ñ–¥–µ–º
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = collector.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        collector.stop()

        # –ü–†–û–í–ï–†–Ø–ï–ú –õ–û–ì–ò
        print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í:")
        logs_dir = os.path.join(project_root, "logs")

        if os.path.exists(logs_dir):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
            for log_file in ['model.log.jsonl', 'system.log.jsonl', 'basic.log']:
                file_path = os.path.join(logs_dir, log_file)
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        print(f"üìÑ {log_file}: {len(lines)} –∑–∞–ø–∏—Å–µ–π")

                        # –ò—â–µ–º –ª–æ–≥–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
                        if log_file == 'model.log.jsonl':
                            collect_logs = []
                            for line in lines:
                                if 'collect' in line.lower():
                                    collect_logs.append(line)
                            print(f"   üîç –õ–æ–≥–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞: {len(collect_logs)}")

                            if collect_logs:
                                print("   üìù –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞:")
                                for log in collect_logs[:2]:
                                    print(f"      {log.strip()}")

        success = status['processed_count'] == 8
        print(f"\n{'üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if success else 'üí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù'}")
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_logging_fixed()