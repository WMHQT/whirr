import sys
import os
import time
import queue
import logging

# –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# –ü—Ä–æ—Å—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from src.logger import setup_logging
from src.collect import ResultCollector, InferenceResult


def simple_test():
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ö–û–õ–õ–ï–ö–¢–û–†–ê")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
    test_queue = queue.Queue()
    collector = ResultCollector(test_queue)

    print("1. ‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é")

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    collector.start()
    time.sleep(1)

    print(f"2. ‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    timestamp = time.time()
    for i in range(8):
        result = InferenceResult(
            channel_id=i,
            timestamp=timestamp,
            category_pred=(i, 0.9),
            target_pred=(i, 0.8)
        )
        test_queue.put(result)
        print(f"   üì§ –ö–∞–Ω–∞–ª {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    # –ñ–¥–µ–º
    time.sleep(2)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    status = collector.get_status()
    print(f"3. üìä –°—Ç–∞—Ç—É—Å: {status}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {collector.processed_count}")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    collector.stop()

    success = collector.processed_count == 8
    print(f"\n{'üéâ –£–°–ü–ï–•' if success else 'üí• –û–®–ò–ë–ö–ê'}: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {collector.processed_count}/8 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    return success


if __name__ == "__main__":
    simple_test()